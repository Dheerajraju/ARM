#include <LPC21XX.H>

#define LED 0xFF       // P0.0 - P0.7 as data lines for LCD
#define RS  (1 << 8)   // RS pin connected to P0.8
#define E   (1 << 9)   // Enable pin connected to P0.9

// Function Declarations
void LCD_INIT(void);
void LCD_COMMAND(unsigned char);
void LCD_DATA(unsigned char);
void LCD_INTEGER(int);
void LCD_STR(unsigned char*);
void delayms(int);

// Simple software delay function
void delayms(int ms)
{
    unsigned int i;
    for (; ms > 0; ms--)
        for (i = 12000; i > 0; i--);  // Roughly 1ms delay on 12MHz
}

// Main Function
int main()
{
    LCD_INIT();                 // Initialize LCD
    LCD_COMMAND(0x80);          // Set cursor at beginning of first line
    //LCD_DATA('A');              // Display character 'A'
    //LCD_COMMAND(0xC0);          // Move cursor to beginning of second line
    //LCD_STR("VECTOR");          // Display string "VECTOR"
	LCD_INTEGER(1234);          //display integer 1234
    while (1);                  // Infinite loop
}

// Initialize LCD
void LCD_INIT(void)
{
    IODIR0 = LED | RS | E;      // Set P0.0 to P0.9 as output
    delayms(20);                // Wait after power-on

    LCD_COMMAND(0x38);          // 8-bit, 2-line, 5x7 font
    LCD_COMMAND(0x0C);          // Display ON, Cursor OFF
    LCD_COMMAND(0x01);          // Clear display
    LCD_COMMAND(0x02);          // Return home
    delayms(2);
}

// Send command to LCD
void LCD_COMMAND(unsigned char cmd)
{
    IOCLR0 = LED | RS | E;      // Clear all relevant pins
    IOSET0 = cmd;               // Send command to data lines
    IOCLR0 = RS;                // RS = 0 for command
    IOSET0 = E;                 // Enable high
    delayms(2);
    IOCLR0 = E;                 // Enable low to latch command
}

// Send data (character) to LCD
void LCD_DATA(unsigned char data)
{
    IOCLR0 = LED | RS | E;      // Clear all relevant pins
    IOSET0 = data;              // Put character on data lines
    IOSET0 = RS;                // RS = 1 for data
    IOSET0 = E;                 // Enable high
    delayms(2);
    IOCLR0 = E;                 // Enable low to latch data
}

// Display a full string on LCD
void LCD_STR(unsigned char *s)
{
    while (*s)
    {
        LCD_DATA(*s++);         // Send characters one by one
    }
}

void LCD_INTEGER(int n)
{
unsigned char arr[5];
signed char i=0;
if (n==0)
LCD_DATA('0');
else
{
if(n<0)
{
LCD_DATA('_');
n=-n;
}
while(n>0)
{
arr[i++] = n% 10;
n=n/10;
}
for(--i;i>=0;i--)
LCD_DATA(arr[i] +48);
}
}

